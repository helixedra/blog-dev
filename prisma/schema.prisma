generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model categories {
  category_id Int       @id @default(autoincrement())
  name        String    @unique @db.VarChar(50)
  slug        String    @unique @db.VarChar(50)
  description String?
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  posts       posts[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model comments {
  comment_id     Int        @id @default(autoincrement())
  post_id        Int
  user_id        Int?
  author_name    String?    @db.VarChar(100)
  author_email   String?    @db.VarChar(100)
  content        String
  status         String?    @default("pending") @db.VarChar(20)
  created_at     DateTime?  @default(now()) @db.Timestamptz(6)
  updated_at     DateTime?  @default(now()) @db.Timestamptz(6)
  parent_id      Int?
  comments       comments?  @relation("commentsTocomments", fields: [parent_id], references: [comment_id], onDelete: Cascade, onUpdate: NoAction)
  other_comments comments[] @relation("commentsTocomments")
  posts          posts      @relation(fields: [post_id], references: [post_id], onDelete: Cascade, onUpdate: NoAction)
  users          users?     @relation(fields: [user_id], references: [user_id], onUpdate: NoAction)

  @@index([post_id], map: "idx_comments_post")
  @@index([status], map: "idx_comments_status")
}

model post_tags {
  post_id Int
  tag_id  Int
  posts   posts @relation(fields: [post_id], references: [post_id], onDelete: Cascade, onUpdate: NoAction)
  tags    tags  @relation(fields: [tag_id], references: [tag_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([post_id, tag_id])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model posts {
  post_id            Int         @id @default(autoincrement())
  title              String      @db.VarChar(255)
  likeCount          Int         @default(0) // Denormalized counter
  likes              like[] // Detailed tracking
  excerpt            String?
  content            String
  author_id          Int
  category_id        Int?
  status             String?     @default("draft") @db.VarChar(20)
  published_at       DateTime?   @db.Timestamptz(6)
  created_at         DateTime?   @default(now()) @db.Timestamptz(6)
  updated_at         DateTime?   @default(now()) @db.Timestamptz(6)
  featured_image_url String?     @db.VarChar(255)
  meta_title         String?     @db.VarChar(255)
  meta_description   String?
  comments           comments[]
  post_tags          post_tags[]
  users              users       @relation(fields: [author_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  categories         categories? @relation(fields: [category_id], references: [category_id], onDelete: NoAction, onUpdate: NoAction)

  @@index([author_id], map: "idx_posts_author")
  @@index([category_id], map: "idx_posts_category")
  @@index([published_at], map: "idx_posts_published")
  @@index([status], map: "idx_posts_status")
}

model like {
  like_id    Int      @id @default(autoincrement())
  post_id    Int
  user_id    Int
  created_at DateTime @default(now()) @db.Timestamptz(6)

  post posts @relation(fields: [post_id], references: [post_id], onDelete: Cascade)
  user users @relation(fields: [user_id], references: [user_id], onDelete: NoAction)

  @@unique([post_id, user_id])
  @@index([post_id])
  @@index([user_id])
}

model settings {
  setting_id    Int       @id @default(autoincrement())
  setting_key   String    @unique @db.VarChar(100)
  setting_value String?
  setting_group String?   @db.VarChar(50)
  is_public     Boolean?  @default(false)
  created_at    DateTime? @default(now()) @db.Timestamptz(6)
  updated_at    DateTime? @default(now()) @db.Timestamptz(6)
}

model tags {
  tag_id      Int         @id @default(autoincrement())
  name        String      @unique @db.VarChar(50)
  slug        String      @unique @db.VarChar(50)
  description String?
  created_at  DateTime?   @default(now()) @db.Timestamptz(6)
  post_tags   post_tags[]
}

model users {
  user_id       Int        @id @default(autoincrement())
  username      String     @unique @db.VarChar(50)
  email         String     @unique @db.VarChar(100)
  password_hash String     @db.VarChar(255)
  full_name     String?    @db.VarChar(100)
  bio           String?
  avatar_url    String?    @db.VarChar(255)
  created_at    DateTime?  @default(now()) @db.Timestamptz(6)
  updated_at    DateTime?  @default(now()) @db.Timestamptz(6)
  is_active     Boolean?   @default(true)
  is_admin      Boolean?   @default(false)
  comments      comments[]
  posts         posts[]
  likes         like[]
}
